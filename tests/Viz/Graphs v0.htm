<!DOCTYPE html>
<meta charset="utf-8">
<style>

svg {
  font: 10px sans-serif;
}

.area {
  fill: steelblue;
  clip-path: url(#clip);
}

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.brush .extent {
  stroke: #fff;
  fill-opacity: .125;
  shape-rendering: crispEdges;
}

</style>
<body>
<h2>Loaded interval : <span class="start_time_total">01/01/2010 12:00</span> - End interval : <span class="end_time_total">07/01/2010 12:00</span></h2>
<svg id="context" height="80" width="1000">
  <text x="15" y="15" fill="black">Context graph</text>
</svg> 

<h3>Start interval : <span id="start_time">01/01/2010 12:00</span> - End interval : <span id="end_time">07/01/2010 12:00</span></h3>

<svg id="focus" height="500" width="1000">
  <text x="15" y="15" fill="black">Focus graph</text>
</svg> 

<script src="http://d3js.org/d3.v3.min.js"></script>
<script>

// Function to read POST variables
function GetUrlValue(VarSearch){
    var SearchString = window.location.search.substring(1);
    var VariableArray = SearchString.split('&');
    for(var i = 0; i < VariableArray.length; i++){
        var KeyValuePair = VariableArray[i].split('=');
        if(KeyValuePair[0] == VarSearch){
            return KeyValuePair[1];
        }
    }
}

var width = (GetUrlValue('w') === undefined) ? 920 : GetUrlValue('w')-80;
    height_context = 80 - 40;
    height_focus = 500 - 40;

// Set correct width of all svg charts
d3.selectAll("svg").attr("width",(GetUrlValue('w') === undefined) ? 1000 : GetUrlValue('w'));
	
var parseDate = d3.time.format("%d.%m.%Y %H:%M:%S");

var x = d3.time.scale().range([0, width]),
    x2 = d3.time.scale().range([0, width]),
    y = d3.scale.linear().range([height_focus, 0]),
    y2 = d3.scale.linear().range([height_context, 0]);

var xAxis = d3.svg.axis().scale(x).orient("bottom"),
    xAxis2 = d3.svg.axis().scale(x2).orient("bottom"),
    yAxis = d3.svg.axis().scale(y).orient("left");

var brush = d3.svg.brush()
    .x(x2)
    .on("brush", brushed);

var area = d3.svg.area()
    .interpolate("linear")   <!-- monotone FOCUS -->
    .x(function(d) { return x(d.date); })
    .y0(height_focus)
    .y1(function(d) { return y(d.Total_UserTime); });

var area2 = d3.svg.area()
    .interpolate("monotone") <!-- monotone CONTEXT -->
    .x(function(d) { return x2(d.date); })
    .y0(height_context)
    .y1(function(d) { return y2(d.Total_UserTime); });

d3.select("body").select("#focus")
    .append("defs").append("clipPath")
    .attr("id", "clip")
    .append("rect")
    .attr("width", width)
    .attr("height", height_focus);

d3.select("body").select("#context").select("text").remove();
var context = d3.select("body").select("#context")
    .append("g")
	.attr("transform", "translate(40,10)");

d3.select("body").select("#focus").select("text").remove();
var focus = d3.select("body").select("#focus")
    .append("g")
	.attr("transform", "scale(0.5)")
	.attr("transform", "translate(40,10)");
	
d3.csv("OS metrics (2)_1mn.csv", type, function(error, data) {
  x.domain(d3.extent(data.map(function(d) { return d.date; })));
  y.domain([0, 100]);
  x2.domain(x.domain());
  y2.domain(y.domain());

  document.getElementsByClassName("start_time_total")[0].innerHTML = parseDate(x.domain()[0]);
  document.getElementsByClassName("end_time_total")[0].innerHTML = parseDate(x.domain()[1]);
  
  updateInterval(x.domain()[0],x.domain()[1]);
  
  focus.append("path")
      .datum(data)
      .attr("class", "area")
      /*.attr("class", "line")*/
      .attr("d", area)
	  .style("stroke","red")
	  .attr("data-legend",function(d) { return "Processor(_total) %User time"})
	  /*.attr("data-legend","Processor(_total) %User time");*/
	  ;
	  
  focus.append("g")
      .attr("class","legend")
      .attr("transform","translate(50,30)")
      .style("font-size","12px")
	  /*.call(d3.legend) <--- problÃ¨me  */
	  ;

  focus.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height_focus + ")")
      .call(xAxis);

  focus.append("g")
      .attr("class", "y axis")
      .call(yAxis);

  context.append("path")
      .datum(data)
      .attr("class", "area")
      .attr("d", area2);

  context.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height_context + ")")
      .call(xAxis2);

  context.append("g")
      .attr("class", "x brush")
      .call(brush)
    .selectAll("rect")
      .attr("y", -6)
      .attr("height", height_context + 7);
	  
});

function updateInterval(start_time,end_time){
	document.getElementById("start_time").innerHTML = parseDate(start_time);
	document.getElementById("end_time").innerHTML = parseDate(end_time);
}

function brushed() {
  x.domain(brush.empty() ? x2.domain() : brush.extent());
  focus.select(".area").attr("d", area);
  focus.select(".x.axis").call(xAxis);
  updateInterval(x.domain()[0],x.domain()[1]);
  //console.log(x.domain()[0]);
}

function type(d) {
	var o = {}
	o.date = parseDate.parse(d['Timestamp']);
	o.Total_UserTime = +d['\\\\ecureuil\\processor(_total)\\% user time'];
	return o;
}
		
</script>
